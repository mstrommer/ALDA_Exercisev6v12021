// Test definitions. Do NOT edit this file!

#include <tuple>

//#define CATCH_CONFIG_MAIN // defines main() automatically
#include "lib/catch.hpp"
#include "bintree.hpp"

// =====================
// Bintree Testcases
// ---------------------

TEST_CASE("Test1", "insert")
{
    binTree *tree = t_init();
    insert(tree, 1, "123");
    INFO("No Node was inserted into the tree");
    REQUIRE(tree->root != nullptr);
}

TEST_CASE("Test2", "insert")
{
    binTree *tree = t_init();
    insert(tree, 1, "123");
    REQUIRE(tree->root != nullptr);
    INFO("Data needs to be inserted as C-String!");
    REQUIRE(strlen(tree->root->data) + 1 == 4);
}

TEST_CASE("Test3", "insert")
{
    binTree *tree = t_init();
    insert(tree, 3, "123");
    REQUIRE(tree->root != nullptr);
    insert(tree, 1, "2");
    insert(tree, 6, "4");
    INFO("Testing insert for keys: 3 - 1 - 6.");
    REQUIRE(tree->root->left != nullptr);
    REQUIRE(tree->root->right != nullptr);
    REQUIRE(tree->root->right->key == 6);
    REQUIRE(tree->root->left->key == 1);
}

TEST_CASE("Test4", "insert")
{
    binTree *tree = t_init();
    insert(tree, 5, "5");
    REQUIRE(tree->root != nullptr);
    insert(tree, 4, "4");
    insert(tree, 3, "3");
    INFO("Testing insert for keys: 5 - 4 - 3.");
    REQUIRE(tree->root->left != nullptr);
    REQUIRE(tree->root->left->key == 4);
    REQUIRE(tree->root->left->left->key == 3);
}


TEST_CASE("Test5", "evaluateExpression")
{
    binTree *tree = t_init();
    insert(tree, 3, "*");
    insert(tree, 1, "+");
    insert(tree, 2, "25");
    insert(tree, 4, "-");
    insert(tree, 6, "-");
    insert(tree, 5, "2");
    insert(tree, 7, "3");
    
    int result = evaluateExpression(tree->root);

    INFO("The expressoin given (+25 * -(2 - 3)) is not computed correctly!");
    REQUIRE(result == 25);
}

TEST_CASE("Test6", "evaluateExpression")
{
    binTree *tree = t_init();
    insert(tree, 10, "+");
    insert(tree, 11, "5");
    insert(tree, 8, "+");
    insert(tree, 9, "4");
    insert(tree, 6, "+");
    insert(tree, 7, "3");
    insert(tree, 4, "+");
    insert(tree, 5, "2");
    insert(tree, 3, "1");
    
    int result = evaluateExpression(tree->root);

    INFO("The expressoin given (1 + 2 + 3 + 4 + 5) is not computed correctly!");
    REQUIRE(result == 15);
}


TEST_CASE("Test7", "evaluateExpression")
{
    binTree *tree = t_init();
    insert(tree, 2, "+");
    insert(tree, 1, "7");
    insert(tree, 4, "*");
    insert(tree, 3, "3");
    insert(tree, 6, "/");
    insert(tree, 5, "10");
    insert(tree, 15, "-");
    insert(tree, 16, "1");
    insert(tree, 9, "/");
    insert(tree, 8, "12");
    insert(tree, 12, "+");
    insert(tree, 11, "3");
    insert(tree, 13, "1");
    
    int result = evaluateExpression(tree->root);

    INFO("The expressoin given (7 + 3 * (10 / (12 / (3 + 1) - 1))) is not computed correctly!");
    REQUIRE(result == 22);
}
